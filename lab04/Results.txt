Results for Tests on 5000 values

Depth = depth of tree, Cost = average #comparisons per search


             Ascending Order        Prefix Order        Random Order
Insert
Method       Depth      Cost     Depth      Cost     Depth      Cost

L         __5000__  __3114__  ___13___  ___11___  ___28___  ___16___

A         __5000__  __1887__  _2954___  __1115__  ___28___  ___16___

R         __2492__  ___952__  _1774___  ___674__  ___27___  ___15___

B         ___206__  ___63___  ___20___  ___14___  ___23___  ___13___

S         ___13___  ___24___  ___29___  ___24___  __1149__  ___23___

V         ___13___  ___12___  ___14___  ___12___  ___15___  ___12___


Notes (what the above indicates):
Inserting values in an ascending order is the the most costly strategy, it has most depth and cost except in the AVL method. Especially in method L, 
A and S, the depth(space) is almost as much as the number of the values. The main reason could be that an ascending order means a worst case especially when 
inserting at the leaves.

A AVL insert method is really efficient, it has the least depth and cost in all inserting orders. An AVL tree is a balanced tree, which always keeps balanced.
 While the S insert method changes the structure of the tree, B insert method periodically rebalance the tree, so 
it has a refining process, which makes it rather efficient.

All insert methods performs well in an random order, I think it's bacause that in an ascending order or a prefix order, the input contains some bad cases, which 
affects the efficiency. The prefix order also has an significant efficiency, while it use more "space" to get lower cost.

In conclusion, insert method B, S and V are rather low-cost method, and AVL method is a comprehensive and elegent strategy.
